*****************************************************************************************************************************************************************
**********************************************************************   Job Termination   **********************************************************************
*****************************************************************************************************************************************************************

prevent_new_job_submissions=false
# Possible values: true, false
# This option takes precedence over other options which specify if new jobs should be started at the end of a job
# Old jobs will check this setting at the end before submitting new jobs (as specified by other options).
# Can be changed during runtime

job_success_actions=submit_new_job
# Possible values: prepare_new_job, submit_new_job, none
# Can be unset (i.e. having no values)
# Multiple values can be specified by using colons: value1:value2:...
# The 'none' action has no effect, can be used a s placeholder
# If no action is specified, the job will simply exit
# Can be changed during runtime

job_success_new_job_jtl=next
# Possible values: same, next, [a-j]
# When set to 'same' the current jtl will be retained
# When set to 'next' the current jtl will simply be changed to the next letter in the alphabet. The highest letter supported is j.



*****************************************************************************************************************************************************************
*****************************************************************   Signal and Error Handling   *****************************************************************
*****************************************************************************************************************************************************************

signals_type1=10                             # time signal
signals_type2=1:2:3:9:12:15:18               # termination signal, slurm uses 15 and 18 for preempting jobs
signals_type3=
# Multiple signals can be specified by using colons as a delimiter: signal1:signal2:...
# The signal can be anything which BASH can trap, i.e.
#       * Signal numbers
#       * Signal names
# See kill -l for a complete list of signal numbers and names
# Changes during the runtime have no effect

internal_error_response=none
signals_type1_response=prepare_new_job:submit_new_job
signals_type2_response=prepare_new_job
signals_type3_response=none
# Possible values: none, ignore, prepare_new_job, submit_new_job,
# Can be unset (i.e. having no values)
# Multiple values can be specified by using colons as delimiters
# If the 'ignore' action is specified, all other actions will be skipped and the error ignored
# The 'none' action has no effect, can be used a s placeholder
# If no action is specified, the job will simply exit
# Can be changed during runtime

internal_error_new_job_jtl=same
signals_type1_new_job_jtl=same
signals_type2_new_job_jtl=same
signals_type3_new_job_jtl=same
# Possible values: same, next, [a-j]
# When set to 'same' the current jtl will be retained
# When set to 'next' the current jtl will simply be changed to the next letter in the alphabet. The highest letter supported is j.

task_error_response=internal_error
# Possible values: ignore, internal_error
# If set to internal_error, the entire subjob will be terminated with exit code 1, causing an internal job error (internal job errors can be controlled by some of the other options)
# If set to ignore, the subjob will continue until all the other tasks are completed. The exit code of the subjob will always be 0 in this case.
# Changes of this setting will have no effect during the run of the jobs (only the initial value will be used)
